# Human_Kidney_Multiomics_and_Spatial_Atlas_
#Human scRNA-seq Analysis
library (Seurat)
library (dplyr)
library (ggplot2)
library (harmony)
library (patchwork)
library (SoupX)
library (DoubletFinder)
library(reticulate)
library(sceasy)
library(anndata)
library(patchwork)
library(SeuratDisk)

#================================Ambient RNA Correction===============================#
Control1 = load10X('path/to/your/cellranger/outs/folder')
Control1 = autoEstCont(Control1)
Control1 = adjustCounts(Control1)
#Do it for all samples
#================================Doublet Removal===============================#
Control1.S <- CreateSeuratObject(counts = Control1, project = "Control1", min.cells = 3, min.features = 300) # create Seurat object
Control1.S <- NormalizeData(Control1.S)
Control1.S <- FindVariableFeatures(Control1.S, selection.method = "vst", nfeatures = 2000)
Control1.S <- ScaleData(Control1.S)
Control1.S <- RunPCA(Control1.S)
Control1.S <- RunUMAP(Control1.S, dims = 1:50)
sweep.res.list_kidney <- paramSweep_v3(Control1.S, PCs = 1:30, sct = FALSE)
sweep.stats_kidney <- summarizeSweep(sweep.res.list_kidney, GT = FALSE)
bcmvn_kidney <- find.pK(sweep.stats_kidney) #determine the pk
nExp_poi <- round(0.075*nrow(Control1.S@meta.data)) 
Control1.S <- doubletFinder_v3(seu_kidney, PCs = 1:30, pN = 0.25, pK = #depends on the previous sterp, nExp = nExp_poi, reuse.pANN = FALSE, sct = FALSE)
Control1.S.Filtered <- subset(Control1.S, subset = #Doublet_related_column == "singlet")                                 
#Do it for all samples
#============================Merge Datssets======================================================#
HK_SC_RNA = merge (Control1.S.Filtered, y = c (#All other sc filtered objects))

#============================Add percent.mt to dataset======================================================#
HK_SC_RNA[["percent.mt"]] <- PercentageFeatureSet(HK_SC_RNA, pattern = "^MT-")

#============================Pre Processing======================================================#
HK_SC_RNA <- subset(HK_SC_RNA, subset = nFeature_RNA > 200 & nFeature_RNA < 3000 & percent.mt < 50 & percent.rpl < 15 & percent.rps < 15)

HK_SC_RNA <- FindVariableFeatures(object = HK_SC_RNA,selection.method = "vst")
HK_SC_RNA <- NormalizeData(HK_SC_RNA)
HK_SC_RNA <- ScaleData(HK_SC_RNA, vars.to.regress = c ("nCount_RNA", "percent.mt", "percent.rpl", "percent.rps"))
HK_SC_RNA <- RunPCA(HK_SC_RNA, assay = 'RNA', npcs = 30, features = VariableFeatures(object = HK_SC_RNA), 
                              verbose = TRUE, ndims.print = 1:5, nfeatures.print = 10)

#============= Run Harmony =============
HK_SC_RNA <- RunHarmony(HK_SC_RNA, group.by.vars = "orig.ident")
HK_SC_RNA <- RunUMAP(HK_SC_RNA, reduction = "harmony", dims = 1:30)
HK_SC_RNA <- FindNeighbors(HK_SC_RNA, reduction = "harmony", dims = 1:30) %>% FindClusters()				   
DimPlot(HK_SC_RNA, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()

#================================== DEG List and cell type annotation==============================#
HK_SC_RNA.Markers <- FindAllMarkers(HK_SC_RNA, only.pos = TRUE, logfc.threshold = 0.25)

#================================== Annotation and store data as Idents==============================#
HK_SC_RNA <- RenameIdents(HK_SC_RNA, `0` = "PT")
#Do it for all clusters

#================================== Further cleaning the data==============================#
#load a previously published dataset (Wilson et al. 2022, Nature communication)
HK.Hum  =readRDS ("HK.Hum.Clusters.Idents.2.2.2023.rds")
transfer.anchors <- FindTransferAnchors(reference = HK.Hum,query = HK_SC_RNA,reduction = 'cca', normalization.method = "SCT")
saveRDS (transfer.anchors, file = "transfer.anchors.HK.SN.Hum.2.2.2023.rds")
predicted.labels <- TransferData(
  anchorset = transfer.anchors,
  refdata = HK_Him$celltype,
  weight.reduction = HK_SC_RNA[['pca']],
  dims = 1:50
)
HK_SC_RNA <- AddMetaData(object = HK_SC_RNA, metadata = predicted.labels)
#================================== Remove the cells if "predicted labels" mismatch with "Idents" ==============================#
indices <- which(HK_SC_RNA$meta.data$Idents == HK.Hum$meta.data$celltype)
HK_SC_RNA_Filtered <- subset(HK_SC_RNA, cells = colnames(HK_SC_RNA)[indices])

#==================================Perform re-clustering in the clean dataset ==============================#

HK_SC_RNA_Filtered <- FindVariableFeatures(object = HK_SC_RNA_Filtered,selection.method = "vst")
HK_SC_RNA_Filtered <- NormalizeData(HK_SC_RNA_Filtered)
HK_SC_RNA_Filtered <- ScaleData(HK_SC_RNA_Filtered, vars.to.regress = c ("nCount_RNA", "percent.mt", "percent.rpl", "percent.rps"))
HK_SC_RNA_Filtered <- RunPCA(HK_SC_RNA_Filtered, assay = 'RNA', npcs = 30, features = VariableFeatures(object = HK_SC_RNA_Filtered), 
                              verbose = TRUE, ndims.print = 1:5, nfeatures.print = 10)
HK_SC_RNA_Filtered <- RunHarmony(HK_SC_RNA_Filtered, group.by.vars = "orig.ident")
HK_SC_RNA_Filtered <- RunUMAP(HK_SC_RNA_Filtered, reduction = "harmony", dims = 1:30)
HK_SC_RNA_Filtered <- FindNeighbors(HK_SC_RNA_Filtered, reduction = "harmony", dims = 1:30) %>% FindClusters()				   
DimPlot(HK_SC_RNA_Filtered, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()

HK_SC_RNA_Filtered.Markers <- FindAllMarkers(HK_SC_RNA_Filtered, only.pos = TRUE, logfc.threshold = 0.25)

#==================================Convert to adata using sceasy ==============================#
HK_SC_RNA_anndata <- convertFormat(HK_SC_RNA_Filtered, from="seurat", to="anndata", main_layer="counts", drop_single_values=FALSE)
write_h5ad(HK_SC_RNA_anndata, filename = "HK_SC_RNA_anndata.h5ad")
